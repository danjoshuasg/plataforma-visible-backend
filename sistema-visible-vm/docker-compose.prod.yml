services:
  postgres:
    image: postgres:15-alpine
    container_name: auth-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-authdb}
      POSTGRES_USER: ${POSTGRES_USER:-authuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-authpass123}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d:ro
    networks:
      - auth-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-authuser} -d ${POSTGRES_DB:-authdb}"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.7
    container_name: auth-keycloak-prod
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin123}
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: ${POSTGRES_DB:-authdb}
      KC_DB_USERNAME: ${POSTGRES_USER:-authuser}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-authpass123}
      KC_HOSTNAME_STRICT: false
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    volumes:
      - keycloak_data_prod:/opt/keycloak/data
      - ./keycloak/import:/opt/keycloak/data/import:ro
    ports:
      - "8080:8080"
    networks:
      - auth-network-prod
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    command: ["start-dev", "--import-realm"]
    healthcheck:
      test: ["CMD-SHELL", "timeout 3 bash -c '</dev/tcp/localhost/8080' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  golang-api:
    image: 92623745danjoshua/authplataformavisible:latest
    container_name: auth-golang-api-prod
    environment:
      PORT: 8090
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: ${KEYCLOAK_REALM:-demo-realm}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID:-demo-client}
      POSTGREST_URL: http://postgrest:3000
      GIN_MODE: release
    ports:
      - "8090:8090"
    networks:
      - auth-network-prod
    depends_on:
      keycloak:
        condition: service_healthy
    restart: unless-stopped

  postgrest:
    image: postgrest/postgrest:v11.2.2
    container_name: auth-postgrest-prod
    environment:
      PGRST_DB_URI: postgres://${POSTGRES_USER:-authuser}:${POSTGRES_PASSWORD:-authpass123}@postgres:5432/${POSTGRES_DB:-authdb}
      PGRST_OPENAPI_SERVER_PROXY_URI: http://localhost:3000
      PGRST_DB_SCHEMA: api
      PGRST_DB_ANON_ROLE: web_anon
    ports:
      - "3000:3000"
    networks:
      - auth-network-prod
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "timeout 3 bash -c '</dev/tcp/localhost/3000' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  nginx:
    image: nginx:alpine
    container_name: auth-nginx-prod
    volumes:
      - ./docs:/usr/share/nginx/html/docs:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    networks:
      - auth-network-prod
    depends_on:
      - golang-api
      - postgrest
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "timeout 3 bash -c '</dev/tcp/localhost/80' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

networks:
  auth-network-prod:
    driver: bridge

volumes:
  postgres_data_prod:
    driver: local
  keycloak_data_prod:
    driver: local